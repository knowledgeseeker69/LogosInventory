<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>